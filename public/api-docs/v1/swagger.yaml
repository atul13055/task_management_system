openapi: 3.0.1
info:
  title: Task Management API
  description: API for managing tasks, teams, and user authentication with roles and permissions
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
  - url: https://task-management-system-0c84.onrender.com/api/v1
tags:
  - name: Auth
    description: Authentication endpoints
  - name: Teams
    description: Team management endpoints
  - name: Tasks
    description: Task management endpoints
  - name: User
    description: User profile and related endpoints
paths:
  /signup:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Atul yadav 1
                    email:
                      type: string
                      example: atulyadav9039@gmail.com
                    username:
                      type: string
                      example: atul_dev135
                    password:
                      type: string
                      example: password123
                    password_confirmation:
                      type: string
                      example: password123
                  required: [name, email, username, password, password_confirmation]
      responses:
        '200':
          description: User registered successfully
        '422':
          description: Validation error

  /verify_otp:
    post:
      tags: [Auth]
      summary: Verify user's OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    email:
                      type: string
                      example: atulyadav9039@gmail.com
                    otp:
                      type: string
                      example: "4707"
                  required: [email, otp]
      responses:
        '200':
          description: OTP verified successfully
        '401':
          description: Invalid OTP

  /resend_otp:
    post:
      tags: [Auth]
      summary: Resend OTP to user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    email:
                      type: string
                      example: telite1211@yopmail.com
                  required: [email]
      responses:
        '200':
          description: OTP resent successfully
        '404':
          description: User not found

  /login:
    post:
      tags: [Auth]
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    email:
                      type: string
                      example: telite1211@yopmail.com
                    password:
                      type: string
                      example: password123
                  required: [email, password]
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials

  /forgot_password:
    post:
      tags: [Auth]
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    email:
                      type: string
                      example: telite1211@yopmail.com
                  required: [email]
      responses:
        '200':
          description: Password reset instructions sent
        '404':
          description: User not found

  /reset_password:
    post:
      tags: [Auth]
      summary: Reset user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    email:
                      type: string
                      example: telite1211@yopmail.com
                    password:
                      type: string
                      example: "123456"
                    password_confirmation:
                      type: string
                      example: "123456"
                    otp:
                      type: string
                      example: "9387"
                  required: [email, password, password_confirmation, otp]
      responses:
        '200':
          description: Password reset successfully
        '401':
          description: Invalid OTP

  /teams:
    post:
      tags: [Teams]
      summary: Create a new team
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team:
                  type: object
                  properties:
                    name:
                      type: string
                      example: ruby on rails dev team
                  required: [name]
      responses:
        '201':
          description: Team created successfully
        '401':
          description: Unauthorized

    get:
      tags: [Teams]
      summary: List user's teams with members
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of teams
        '401':
          description: Unauthorized

  /teams/{team_id}/inviteable_users:
    get:
      tags: [Teams]
      summary: List users available for invitation to team
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: integer
        - in: query
          name: status
          schema:
            type: string
            enum: [available]
        - in: query
          name: designation
          schema:
            type: string
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of inviteable users
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /teams/{team_id}/invite:
    post:
      tags: [Teams]
      summary: Invite a member to team
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: telite121@yopmail.com
                role:
                  type: string
                  enum: [member, admin]
                  example: member
              required: [email, role]
      responses:
        '200':
          description: User invited successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found

  /teams/{team_id}/members:
    get:
      tags: [Teams]
      summary: Get team members with team details
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Team members list
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /teams/{team_id}/tasks:
    post:
      tags: [Tasks]
      summary: Create a new task in team
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task:
                  type: object
                  properties:
                    title:
                      type: string
                      example: implement google map
                    description:
                      type: string
                      example: 3rd party api google map
                    status:
                      type: string
                      enum: [pending, in_progress, completed]
                      example: pending
                    priority:
                      type: string
                      enum: [low, medium, high]
                      example: medium
                    due_date:
                      type: string
                      format: date-time
                      example: "2025-04-30T00:00:00Z"
                  required: [title, status, priority, due_date]
      responses:
        '201':
          description: Task created successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

    get:
      tags: [Tasks]
      summary: List tasks in team
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: team_id
          required: true
          schema:
            type: integer
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, in_progress, completed]
        - in: query
          name: priority
          schema:
            type: string
            enum: [low, medium, high]
        - in: query
          name: due_date
          schema:
            type: string
            format: date
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          schema:
            type: integer
            default: 5
      responses:
        '200':
          description: List of tasks
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /tasks/{task_id}:
    get:
      tags: [Tasks]
      summary: Get task details
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task details
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Task not found

    patch:
      tags: [Tasks]
      summary: Update task
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    status:
                      type: string
                      enum: [pending, in_progress, completed]
                    priority:
                      type: string
                      enum: [low, medium, high]
                    due_date:
                      type: string
                      format: date-time
      responses:
        '200':
          description: Task updated successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Task not found

    delete:
      tags: [Tasks]
      summary: Delete task
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Task not found

  /tasks/{task_id}/assign_users:
    patch:
      tags: [Tasks]
      summary: Assign users to task
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assigned_user_ids:
                  type: array
                  items:
                    type: integer
                  example: [5]
              required: [assigned_user_ids]
      responses:
        '200':
          description: Users assigned successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Task or users not found

  /tasks/{task_id}/remove_users:
    patch:
      tags: [Tasks]
      summary: Remove users from task
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                remove_user_ids:
                  type: array
                  items:
                    type: integer
                  example: [3, 4, 5]
              required: [remove_user_ids]
      responses:
        '200':
          description: Users removed successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Task or users not found

  /users/profile:
    get:
      tags: [User]
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile details
        '401':
          description: Unauthorized

  /users:
    patch:
      tags: [User]
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Atul yadav
                    username:
                      type: string
                      example: atul_dev123
                    location:
                      type: string
                      example: Indore
                    skills:
                      type: string
                      example: rails, React, Redis
      responses:
        '200':
          description: Profile updated successfully
        '401':
          description: Unauthorized

    delete:
      tags: [User]
      summary: Delete user account
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Account deleted successfully
        '401':
          description: Unauthorized

  /users/assigned_teams:
    get:
      tags: [User]
      summary: Get user's assigned teams
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of assigned teams
        '401':
          description: Unauthorized

  /users/assigned_tasks:
    get:
      tags: [User]
      summary: Get user's assigned tasks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of assigned tasks
        '401':
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT